/* Auto-generated by genmsg_cpp for file /home/baram/ros/catkin_ws/src/rover5_ros/msg/rover5_node_msg.msg */
#ifndef ROVER5_ROS_MESSAGE_ROVER5_NODE_MSG_H
#define ROVER5_ROS_MESSAGE_ROVER5_NODE_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rover5_ros
{
template <class ContainerAllocator>
struct rover5_node_msg_ {
  typedef rover5_node_msg_<ContainerAllocator> Type;

  rover5_node_msg_()
  : pwm_left(0)
  , pwm_right(0)
  , sonic_distance_left(0)
  , sonic_distance_right(0)
  {
  }

  rover5_node_msg_(const ContainerAllocator& _alloc)
  : pwm_left(0)
  , pwm_right(0)
  , sonic_distance_left(0)
  , sonic_distance_right(0)
  {
  }

  typedef int32_t _pwm_left_type;
  int32_t pwm_left;

  typedef int32_t _pwm_right_type;
  int32_t pwm_right;

  typedef int32_t _sonic_distance_left_type;
  int32_t sonic_distance_left;

  typedef int32_t _sonic_distance_right_type;
  int32_t sonic_distance_right;


  typedef boost::shared_ptr< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover5_ros::rover5_node_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct rover5_node_msg
typedef  ::rover5_ros::rover5_node_msg_<std::allocator<void> > rover5_node_msg;

typedef boost::shared_ptr< ::rover5_ros::rover5_node_msg> rover5_node_msgPtr;
typedef boost::shared_ptr< ::rover5_ros::rover5_node_msg const> rover5_node_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rover5_ros::rover5_node_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rover5_ros::rover5_node_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rover5_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rover5_ros::rover5_node_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ad83e5b852ff7eb503e240cbde5519e0";
  }

  static const char* value(const  ::rover5_ros::rover5_node_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xad83e5b852ff7eb5ULL;
  static const uint64_t static_value2 = 0x03e240cbde5519e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rover5_ros/rover5_node_msg";
  }

  static const char* value(const  ::rover5_ros::rover5_node_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 pwm_left\n\
int32 pwm_right\n\
int32 sonic_distance_left\n\
int32 sonic_distance_right\n\
\n\
\n\
";
  }

  static const char* value(const  ::rover5_ros::rover5_node_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rover5_ros::rover5_node_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rover5_ros::rover5_node_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pwm_left);
    stream.next(m.pwm_right);
    stream.next(m.sonic_distance_left);
    stream.next(m.sonic_distance_right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct rover5_node_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover5_ros::rover5_node_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rover5_ros::rover5_node_msg_<ContainerAllocator> & v) 
  {
    s << indent << "pwm_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pwm_left);
    s << indent << "pwm_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pwm_right);
    s << indent << "sonic_distance_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sonic_distance_left);
    s << indent << "sonic_distance_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sonic_distance_right);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROVER5_ROS_MESSAGE_ROVER5_NODE_MSG_H

